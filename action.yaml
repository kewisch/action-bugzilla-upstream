---

name: "Bugzilla Upstream Check"
description: "Monitor Bugzilla issues so you know when they are resolved"
inputs:
  label:
    description: The label to search upstream issues on
    default: upstream
  bugzilla:
    description: Bugzilla instance to check
    default: bugzilla.mozilla.org
  github-token:
    description: Github token
    required: true

runs:
  using: composite
  steps:
    - name: Check and Comment on Upstream Issues
      uses: actions/github-script@v6
      env:
        BUGZILLA_HOSTNAME: ${{ inputs.bugzilla }}
        UPSTREAM_LABEL: ${{ inputs.label }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const BUGZILLA_REGEX = new RegExp(`https://${process.env.BUGZILLA_HOSTNAME}/show_bug\\.cgi\\?id=(\\d+)`);
          const GH_ACTION_DATA_REGEX = /<!---GH-ACTION-DATA-(.*)-GH-ACTION-DATA--->/;

          console.log('Starting to process GitHub issues labeled "upstream"...');

          // Paginate through all open issues with label "upstream"
          for await (const { data: issues } of github.paginate.iterator(github.rest.issues.listForRepo, {
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: process.env.UPSTREAM_LABEL
          })) {
            for (const issue of issues) {
              console.log(`Processing issue https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issue.number}`);

              let perBugData = {};

              // Paginate through comments for the specific issue
              for await (const { data: comments } of github.paginate.iterator(github.rest.issues.listComments, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number
              })) {
                const previousComment = comments.find(comment => comment.user.login === 'github-actions[bot]');
                const previousDataMatch = previousComment?.body.match(GH_ACTION_DATA_REGEX);
                const previousData = previousDataMatch?.[1] ? JSON.parse(previousDataMatch[1]) : null;

                for (const comment of comments) {
                  const bzMatch = comment.body.match(BUGZILLA_REGEX);
                  if (!bzMatch) {
                    continue;
                  }

                  if (comment.author_association == 'OWNER' || comment.author_association == 'MEMBER') {
                    perBugData[bzMatch[1]] = null;
                  } else if (comment.user.login === 'github-actions[bot]') {
                    const ghDataMatch = comment.body.match(GH_ACTION_DATA_REGEX);
                    const ghData = ghDataMatch?.[1] ? JSON.parse(ghDataMatch[1]) : null;
                    perBugData[bzMatch[1]] = ghData;
                  }
                }
              }

              for (const [bugId, previousData] of Object.entries(perBugData)) {
                console.log(`\tFetching Bugzilla data for bug ${bugId}`);

                const response = await fetch(`https://${process.env.BUGZILLA_HOSTNAME}/rest/bug/${bugId}`);
                const data = await response.json();
                const bug = data?.bugs?.[0];

                if (!bug) {
                  console.log(`\tNo data found for bug ${bugId}. Skipping...`);
                  continue;
                }

                const { resolution, status, target_milestone: targetMilestone, last_change_time: lastChangedDate } = bug;

                if (previousData) {
                  if (previousData.lastChangedDate === lastChangedDate || (previousData.status === status && previousData.resolution == resolution)) {
                    console.log(`\tNo changes detected for Bugzilla bug ID ${bugId}. Skipping...`);
                    continue;
                  }
                }

                if (status === 'RESOLVED') {
                  const commentContent =
                    `Upstream issue [bug ${bugId}](https://${process.env.BUGZILLA_HOSTNAME}/show_bug.cgi?id=${bugId}) has changed to ${status} ${resolution} ` +
                    `and will be ready for ${bug.product} ${targetMilestone}.\n` +
                    `<!---GH-ACTION-DATA-${JSON.stringify({ resolution, status, targetMilestone, lastChangedDate })}-GH-ACTION-DATA--->`;

                  console.log(`\tCreating comment on issue #${issue.number} regarding bug ${bugId}'s status...`);
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: commentContent
                  });
                } else {
                  console.log(`\tCurrent status is ${status} ${resolution}`);
                }
              }
            }
          }

          console.log('Finished processing GitHub issues.');
